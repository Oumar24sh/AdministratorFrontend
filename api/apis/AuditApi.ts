/* tslint:disable */
/* eslint-disable */
/**
 * Beau Plan Administrator\'s API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuditResponseListPagedResponse,
  ProblemDetails,
} from '../models/index';
import {
    AuditResponseListPagedResponseFromJSON,
    AuditResponseListPagedResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface ApiAuditGetRequest {
    userName?: string;
    firstName?: string;
    lastName?: string;
    type?: string;
    tableName?: string;
    dateTime?: Date;
    pageNumber?: number;
    pageSize?: number;
}

/**
 * 
 */
export class AuditApi extends runtime.BaseAPI {

    /**
     */
    async apiAuditGetRaw(requestParameters: ApiAuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditResponseListPagedResponse>> {
        const queryParameters: any = {};

        if (requestParameters.userName !== undefined) {
            queryParameters['UserName'] = requestParameters.userName;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['FirstName'] = requestParameters.firstName;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['LastName'] = requestParameters.lastName;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['Type'] = requestParameters.type;
        }

        if (requestParameters.tableName !== undefined) {
            queryParameters['TableName'] = requestParameters.tableName;
        }

        if (requestParameters.dateTime !== undefined) {
            queryParameters['DateTime'] = (requestParameters.dateTime as any).toISOString();
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Audit`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditResponseListPagedResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuditGet(requestParameters: ApiAuditGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditResponseListPagedResponse> {
        const response = await this.apiAuditGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
