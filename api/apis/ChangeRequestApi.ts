/* tslint:disable */
/* eslint-disable */
/**
 * Beau Plan Administrator\'s API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeRequestBody,
  ChangeRequestResponse,
  ProblemDetails,
} from '../models/index';
import {
    ChangeRequestBodyFromJSON,
    ChangeRequestBodyToJSON,
    ChangeRequestResponseFromJSON,
    ChangeRequestResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface ApiChangeRequestPostRequest {
    changeRequestBody?: ChangeRequestBody;
}

/**
 * 
 */
export class ChangeRequestApi extends runtime.BaseAPI {

    /**
     */
    async apiChangeRequestGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChangeRequestResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ChangeRequest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChangeRequestResponseFromJSON));
    }

    /**
     */
    async apiChangeRequestGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChangeRequestResponse>> {
        const response = await this.apiChangeRequestGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChangeRequestPostRaw(requestParameters: ApiChangeRequestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeRequestBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ChangeRequest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeRequestBodyToJSON(requestParameters.changeRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeRequestBodyFromJSON(jsonValue));
    }

    /**
     */
    async apiChangeRequestPost(requestParameters: ApiChangeRequestPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeRequestBody> {
        const response = await this.apiChangeRequestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
