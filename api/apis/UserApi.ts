/* tslint:disable */
/* eslint-disable */
/**
 * Beau Plan Administrator\'s API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
  UserBody,
  UserResponse,
  UserResponseListPagedResponse,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UserBodyFromJSON,
    UserBodyToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
    UserResponseListPagedResponseFromJSON,
    UserResponseListPagedResponseToJSON,
} from '../models/index';

export interface ApiUserEmailGetRequest {
    email: string;
}

export interface ApiUserGetRequest {
    firstName?: string;
    lastName?: string;
    email?: string;
    userName?: string;
    role?: string;
    pageNumber?: number;
    pageSize?: number;
}

export interface ApiUserPostRequest {
    userBody?: UserBody;
}

export interface ApiUsersUserNamePutRequest {
    userName: string;
    userBody?: UserBody;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     */
    async apiUserEmailGetRaw(requestParameters: ApiUserEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling apiUserEmailGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/User/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserEmailGet(requestParameters: ApiUserEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.apiUserEmailGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserGetRaw(requestParameters: ApiUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseListPagedResponse>> {
        const queryParameters: any = {};

        if (requestParameters.firstName !== undefined) {
            queryParameters['FirstName'] = requestParameters.firstName;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['LastName'] = requestParameters.lastName;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['Email'] = requestParameters.email;
        }

        if (requestParameters.userName !== undefined) {
            queryParameters['UserName'] = requestParameters.userName;
        }

        if (requestParameters.role !== undefined) {
            queryParameters['Role'] = requestParameters.role;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/User`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseListPagedResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserGet(requestParameters: ApiUserGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseListPagedResponse> {
        const response = await this.apiUserGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserPostRaw(requestParameters: ApiUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/User`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserBodyToJSON(requestParameters.userBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserPost(requestParameters: ApiUserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.apiUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUsersUserNamePutRaw(requestParameters: ApiUsersUserNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.userName === null || requestParameters.userName === undefined) {
            throw new runtime.RequiredError('userName','Required parameter requestParameters.userName was null or undefined when calling apiUsersUserNamePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Users/{userName}`.replace(`{${"userName"}}`, encodeURIComponent(String(requestParameters.userName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserBodyToJSON(requestParameters.userBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUsersUserNamePut(requestParameters: ApiUsersUserNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.apiUsersUserNamePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
