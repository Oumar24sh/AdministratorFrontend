/* tslint:disable */
/* eslint-disable */
/**
 * Beau Plan Administrator\'s API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PlotBody,
  PlotResponse,
  PlotResponseListPagedResponse,
} from '../models/index';
import {
    PlotBodyFromJSON,
    PlotBodyToJSON,
    PlotResponseFromJSON,
    PlotResponseToJSON,
    PlotResponseListPagedResponseFromJSON,
    PlotResponseListPagedResponseToJSON,
} from '../models/index';

export interface ApiPlotAffAffRefGetRequest {
    affRef: string;
    ref?: string;
    use?: string;
    status?: string;
    pageNumber?: number;
    pageSize?: number;
}

export interface ApiPlotGetRequest {
    ref?: string;
    use?: string;
    status?: string;
    pageNumber?: number;
    pageSize?: number;
}

export interface ApiPlotIdPutRequest {
    id: number;
    plotBody?: PlotBody;
}

export interface ApiPlotPlotRefGetRequest {
    plotRef: string;
}

/**
 * 
 */
export class PlotApi extends runtime.BaseAPI {

    /**
     */
    async apiPlotAffAffRefGetRaw(requestParameters: ApiPlotAffAffRefGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlotResponseListPagedResponse>> {
        if (requestParameters.affRef === null || requestParameters.affRef === undefined) {
            throw new runtime.RequiredError('affRef','Required parameter requestParameters.affRef was null or undefined when calling apiPlotAffAffRefGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.ref !== undefined) {
            queryParameters['Ref'] = requestParameters.ref;
        }

        if (requestParameters.use !== undefined) {
            queryParameters['Use'] = requestParameters.use;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['Status'] = requestParameters.status;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Plot/Aff/{affRef}`.replace(`{${"affRef"}}`, encodeURIComponent(String(requestParameters.affRef))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlotResponseListPagedResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPlotAffAffRefGet(requestParameters: ApiPlotAffAffRefGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlotResponseListPagedResponse> {
        const response = await this.apiPlotAffAffRefGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPlotGetRaw(requestParameters: ApiPlotGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlotResponseListPagedResponse>> {
        const queryParameters: any = {};

        if (requestParameters.ref !== undefined) {
            queryParameters['Ref'] = requestParameters.ref;
        }

        if (requestParameters.use !== undefined) {
            queryParameters['Use'] = requestParameters.use;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['Status'] = requestParameters.status;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Plot`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlotResponseListPagedResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPlotGet(requestParameters: ApiPlotGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlotResponseListPagedResponse> {
        const response = await this.apiPlotGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPlotIdPutRaw(requestParameters: ApiPlotIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlotBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiPlotIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Plot/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PlotBodyToJSON(requestParameters.plotBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlotBodyFromJSON(jsonValue));
    }

    /**
     */
    async apiPlotIdPut(requestParameters: ApiPlotIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlotBody> {
        const response = await this.apiPlotIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPlotPlotRefGetRaw(requestParameters: ApiPlotPlotRefGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlotResponse>> {
        if (requestParameters.plotRef === null || requestParameters.plotRef === undefined) {
            throw new runtime.RequiredError('plotRef','Required parameter requestParameters.plotRef was null or undefined when calling apiPlotPlotRefGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Plot/{plotRef}`.replace(`{${"plotRef"}}`, encodeURIComponent(String(requestParameters.plotRef))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlotResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPlotPlotRefGet(requestParameters: ApiPlotPlotRefGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlotResponse> {
        const response = await this.apiPlotPlotRefGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
