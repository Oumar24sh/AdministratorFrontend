/* tslint:disable */
/* eslint-disable */
/**
 * Beau Plan Administrator\'s API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommonSpaceBody,
  CommonSpaceResponseListPagedResponse,
  ProblemDetails,
} from '../models/index';
import {
    CommonSpaceBodyFromJSON,
    CommonSpaceBodyToJSON,
    CommonSpaceResponseListPagedResponseFromJSON,
    CommonSpaceResponseListPagedResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface ApiCommonSpaceAffAffRefGetRequest {
    affRef: string;
    ref?: string;
    commonSpaceTypeName?: string;
    pageNumber?: number;
    pageSize?: number;
}

export interface ApiCommonSpaceAffGetRequest {
    ref?: string;
    commonSpaceTypeName?: string;
    pageNumber?: number;
    pageSize?: number;
}

export interface ApiCommonSpaceAfmGetRequest {
    ref?: string;
    commonSpaceTypeName?: string;
    pageNumber?: number;
    pageSize?: number;
}

export interface ApiCommonSpaceIdPutRequest {
    id: number;
    commonSpaceBody?: CommonSpaceBody;
}

/**
 * 
 */
export class CommonSpaceApi extends runtime.BaseAPI {

    /**
     */
    async apiCommonSpaceAffAffRefGetRaw(requestParameters: ApiCommonSpaceAffAffRefGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonSpaceResponseListPagedResponse>> {
        if (requestParameters.affRef === null || requestParameters.affRef === undefined) {
            throw new runtime.RequiredError('affRef','Required parameter requestParameters.affRef was null or undefined when calling apiCommonSpaceAffAffRefGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.ref !== undefined) {
            queryParameters['Ref'] = requestParameters.ref;
        }

        if (requestParameters.commonSpaceTypeName !== undefined) {
            queryParameters['CommonSpaceTypeName'] = requestParameters.commonSpaceTypeName;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CommonSpace/Aff/{affRef}`.replace(`{${"affRef"}}`, encodeURIComponent(String(requestParameters.affRef))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonSpaceResponseListPagedResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommonSpaceAffAffRefGet(requestParameters: ApiCommonSpaceAffAffRefGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonSpaceResponseListPagedResponse> {
        const response = await this.apiCommonSpaceAffAffRefGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommonSpaceAffGetRaw(requestParameters: ApiCommonSpaceAffGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonSpaceResponseListPagedResponse>> {
        const queryParameters: any = {};

        if (requestParameters.ref !== undefined) {
            queryParameters['Ref'] = requestParameters.ref;
        }

        if (requestParameters.commonSpaceTypeName !== undefined) {
            queryParameters['CommonSpaceTypeName'] = requestParameters.commonSpaceTypeName;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CommonSpace/Aff`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonSpaceResponseListPagedResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommonSpaceAffGet(requestParameters: ApiCommonSpaceAffGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonSpaceResponseListPagedResponse> {
        const response = await this.apiCommonSpaceAffGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommonSpaceAfmGetRaw(requestParameters: ApiCommonSpaceAfmGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonSpaceResponseListPagedResponse>> {
        const queryParameters: any = {};

        if (requestParameters.ref !== undefined) {
            queryParameters['Ref'] = requestParameters.ref;
        }

        if (requestParameters.commonSpaceTypeName !== undefined) {
            queryParameters['CommonSpaceTypeName'] = requestParameters.commonSpaceTypeName;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CommonSpace/Afm`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonSpaceResponseListPagedResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommonSpaceAfmGet(requestParameters: ApiCommonSpaceAfmGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonSpaceResponseListPagedResponse> {
        const response = await this.apiCommonSpaceAfmGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommonSpaceIdPutRaw(requestParameters: ApiCommonSpaceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonSpaceBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCommonSpaceIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CommonSpace/${id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CommonSpaceBodyToJSON(requestParameters.commonSpaceBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonSpaceBodyFromJSON(jsonValue));
    }

    /**
     */
    async apiCommonSpaceIdPut(requestParameters: ApiCommonSpaceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonSpaceBody> {
        const response = await this.apiCommonSpaceIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
