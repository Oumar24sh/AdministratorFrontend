/* tslint:disable */
/* eslint-disable */
/**
 * Beau Plan Administrator\'s API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CommonSpaceResponse
 */
export interface CommonSpaceResponse {
    /**
     * 
     * @type {number}
     * @memberof CommonSpaceResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CommonSpaceResponse
     */
    ref?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommonSpaceResponse
     */
    displayName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommonSpaceResponse
     */
    commonSpaceTypeName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommonSpaceResponse
     */
    gisArea?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommonSpaceResponse
     */
    areaOfGreenSpace?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommonSpaceResponse
     */
    areaOfRoadSurface?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommonSpaceResponse
     */
    noOfStreetLights?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommonSpaceResponse
     */
    roadLength?: number | null;
}

/**
 * Check if a given object implements the CommonSpaceResponse interface.
 */
export function instanceOfCommonSpaceResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommonSpaceResponseFromJSON(json: any): CommonSpaceResponse {
    return CommonSpaceResponseFromJSONTyped(json, false);
}

export function CommonSpaceResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonSpaceResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ref': !exists(json, 'ref') ? undefined : json['ref'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'commonSpaceTypeName': !exists(json, 'commonSpaceTypeName') ? undefined : json['commonSpaceTypeName'],
        'gisArea': !exists(json, 'gisArea') ? undefined : json['gisArea'],
        'areaOfGreenSpace': !exists(json, 'areaOfGreenSpace') ? undefined : json['areaOfGreenSpace'],
        'areaOfRoadSurface': !exists(json, 'areaOfRoadSurface') ? undefined : json['areaOfRoadSurface'],
        'noOfStreetLights': !exists(json, 'noOfStreetLights') ? undefined : json['noOfStreetLights'],
        'roadLength': !exists(json, 'roadLength') ? undefined : json['roadLength'],
    };
}

export function CommonSpaceResponseToJSON(value?: CommonSpaceResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'ref': value.ref,
        'displayName': value.displayName,
        'commonSpaceTypeName': value.commonSpaceTypeName,
        'gisArea': value.gisArea,
        'areaOfGreenSpace': value.areaOfGreenSpace,
        'areaOfRoadSurface': value.areaOfRoadSurface,
        'noOfStreetLights': value.noOfStreetLights,
        'roadLength': value.roadLength,
    };
}

