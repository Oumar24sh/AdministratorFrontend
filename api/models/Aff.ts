/* tslint:disable */
/* eslint-disable */
/**
 * Beau Plan Administrator\'s API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AffCalculation } from './AffCalculation';
import {
    AffCalculationFromJSON,
    AffCalculationFromJSONTyped,
    AffCalculationToJSON,
} from './AffCalculation';
import type { AffExpense } from './AffExpense';
import {
    AffExpenseFromJSON,
    AffExpenseFromJSONTyped,
    AffExpenseToJSON,
} from './AffExpense';
import type { AffExpenseItem } from './AffExpenseItem';
import {
    AffExpenseItemFromJSON,
    AffExpenseItemFromJSONTyped,
    AffExpenseItemToJSON,
} from './AffExpenseItem';
import type { CommonSpace } from './CommonSpace';
import {
    CommonSpaceFromJSON,
    CommonSpaceFromJSONTyped,
    CommonSpaceToJSON,
} from './CommonSpace';
import type { Plot } from './Plot';
import {
    PlotFromJSON,
    PlotFromJSONTyped,
    PlotToJSON,
} from './Plot';

/**
 * 
 * @export
 * @interface Aff
 */
export interface Aff {
    /**
     * 
     * @type {number}
     * @memberof Aff
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Aff
     */
    ref: string;
    /**
     * 
     * @type {string}
     * @memberof Aff
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Aff
     */
    displayName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Aff
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Aff
     */
    totalGisArea?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Aff
     */
    totalRoadLength?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Aff
     */
    totalNoOfStreetLights?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Aff
     */
    totalAreaOfRoadSurface?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Aff
     */
    totalAreaOfGreenSpace?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof Aff
     */
    isActive?: boolean | null;
    /**
     * 
     * @type {Date}
     * @memberof Aff
     */
    createdAt?: Date | null;
    /**
     * 
     * @type {Array<Plot>}
     * @memberof Aff
     */
    plots?: Array<Plot> | null;
    /**
     * 
     * @type {Array<CommonSpace>}
     * @memberof Aff
     */
    commonSpaces?: Array<CommonSpace> | null;
    /**
     * 
     * @type {Array<AffCalculation>}
     * @memberof Aff
     */
    affCalculations?: Array<AffCalculation> | null;
    /**
     * 
     * @type {Array<AffExpense>}
     * @memberof Aff
     */
    affExpenses?: Array<AffExpense> | null;
    /**
     * 
     * @type {Array<AffExpenseItem>}
     * @memberof Aff
     */
    affExpenseItems?: Array<AffExpenseItem> | null;
}

/**
 * Check if a given object implements the Aff interface.
 */
export function instanceOfAff(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ref" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function AffFromJSON(json: any): Aff {
    return AffFromJSONTyped(json, false);
}

export function AffFromJSONTyped(json: any, ignoreDiscriminator: boolean): Aff {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ref': json['ref'],
        'name': json['name'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'totalGisArea': !exists(json, 'totalGisArea') ? undefined : json['totalGisArea'],
        'totalRoadLength': !exists(json, 'totalRoadLength') ? undefined : json['totalRoadLength'],
        'totalNoOfStreetLights': !exists(json, 'totalNoOfStreetLights') ? undefined : json['totalNoOfStreetLights'],
        'totalAreaOfRoadSurface': !exists(json, 'totalAreaOfRoadSurface') ? undefined : json['totalAreaOfRoadSurface'],
        'totalAreaOfGreenSpace': !exists(json, 'totalAreaOfGreenSpace') ? undefined : json['totalAreaOfGreenSpace'],
        'isActive': !exists(json, 'isActive') ? undefined : json['isActive'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (json['createdAt'] === null ? null : new Date(json['createdAt'])),
        'plots': !exists(json, 'plots') ? undefined : (json['plots'] === null ? null : (json['plots'] as Array<any>).map(PlotFromJSON)),
        'commonSpaces': !exists(json, 'commonSpaces') ? undefined : (json['commonSpaces'] === null ? null : (json['commonSpaces'] as Array<any>).map(CommonSpaceFromJSON)),
        'affCalculations': !exists(json, 'affCalculations') ? undefined : (json['affCalculations'] === null ? null : (json['affCalculations'] as Array<any>).map(AffCalculationFromJSON)),
        'affExpenses': !exists(json, 'affExpenses') ? undefined : (json['affExpenses'] === null ? null : (json['affExpenses'] as Array<any>).map(AffExpenseFromJSON)),
        'affExpenseItems': !exists(json, 'affExpenseItems') ? undefined : (json['affExpenseItems'] === null ? null : (json['affExpenseItems'] as Array<any>).map(AffExpenseItemFromJSON)),
    };
}

export function AffToJSON(value?: Aff | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'ref': value.ref,
        'name': value.name,
        'displayName': value.displayName,
        'description': value.description,
        'totalGisArea': value.totalGisArea,
        'totalRoadLength': value.totalRoadLength,
        'totalNoOfStreetLights': value.totalNoOfStreetLights,
        'totalAreaOfRoadSurface': value.totalAreaOfRoadSurface,
        'totalAreaOfGreenSpace': value.totalAreaOfGreenSpace,
        'isActive': value.isActive,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt === null ? null : value.createdAt.toISOString()),
        'plots': value.plots === undefined ? undefined : (value.plots === null ? null : (value.plots as Array<any>).map(PlotToJSON)),
        'commonSpaces': value.commonSpaces === undefined ? undefined : (value.commonSpaces === null ? null : (value.commonSpaces as Array<any>).map(CommonSpaceToJSON)),
        'affCalculations': value.affCalculations === undefined ? undefined : (value.affCalculations === null ? null : (value.affCalculations as Array<any>).map(AffCalculationToJSON)),
        'affExpenses': value.affExpenses === undefined ? undefined : (value.affExpenses === null ? null : (value.affExpenses as Array<any>).map(AffExpenseToJSON)),
        'affExpenseItems': value.affExpenseItems === undefined ? undefined : (value.affExpenseItems === null ? null : (value.affExpenseItems as Array<any>).map(AffExpenseItemToJSON)),
    };
}

