/* tslint:disable */
/* eslint-disable */
/**
 * Beau Plan Administrator\'s API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuditResponse
 */
export interface AuditResponse {
    /**
     * 
     * @type {number}
     * @memberof AuditResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AuditResponse
     */
    userId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditResponse
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditResponse
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditResponse
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditResponse
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuditResponse
     */
    tableName?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof AuditResponse
     */
    dateTime?: Date;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AuditResponse
     */
    oldValues?: { [key: string]: any; } | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AuditResponse
     */
    newValues?: { [key: string]: any; } | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuditResponse
     */
    affectedColumns?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AuditResponse
     */
    primaryKey?: { [key: string]: any; } | null;
}

/**
 * Check if a given object implements the AuditResponse interface.
 */
export function instanceOfAuditResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuditResponseFromJSON(json: any): AuditResponse {
    return AuditResponseFromJSONTyped(json, false);
}

export function AuditResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'tableName': !exists(json, 'tableName') ? undefined : json['tableName'],
        'dateTime': !exists(json, 'dateTime') ? undefined : (new Date(json['dateTime'])),
        'oldValues': !exists(json, 'oldValues') ? undefined : json['oldValues'],
        'newValues': !exists(json, 'newValues') ? undefined : json['newValues'],
        'affectedColumns': !exists(json, 'affectedColumns') ? undefined : json['affectedColumns'],
        'primaryKey': !exists(json, 'primaryKey') ? undefined : json['primaryKey'],
    };
}

export function AuditResponseToJSON(value?: AuditResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'userId': value.userId,
        'userName': value.userName,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'type': value.type,
        'tableName': value.tableName,
        'dateTime': value.dateTime === undefined ? undefined : (value.dateTime.toISOString()),
        'oldValues': value.oldValues,
        'newValues': value.newValues,
        'affectedColumns': value.affectedColumns,
        'primaryKey': value.primaryKey,
    };
}

