/* tslint:disable */
/* eslint-disable */
/**
 * Beau Plan Administrator\'s API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CommonSpaceBody
 */
export interface CommonSpaceBody {
    /**
     * 
     * @type {number}
     * @memberof CommonSpaceBody
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof CommonSpaceBody
     */
    commonSpaceTypeId: number;
    /**
     * 
     * @type {number}
     * @memberof CommonSpaceBody
     */
    gisArea: number;
    /**
     * 
     * @type {number}
     * @memberof CommonSpaceBody
     */
    areaOfGreenSpace: number;
    /**
     * 
     * @type {number}
     * @memberof CommonSpaceBody
     */
    areaOfRoadSurface: number;
    /**
     * 
     * @type {number}
     * @memberof CommonSpaceBody
     */
    noOfStreetLights: number;
    /**
     * 
     * @type {number}
     * @memberof CommonSpaceBody
     */
    roadLength: number;
    /**
     * 
     * @type {string}
     * @memberof CommonSpaceBody
     */
    commonSpaceVersionName?: string | null;
}

/**
 * Check if a given object implements the CommonSpaceBody interface.
 */
export function instanceOfCommonSpaceBody(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "commonSpaceTypeId" in value;
    isInstance = isInstance && "gisArea" in value;
    isInstance = isInstance && "areaOfGreenSpace" in value;
    isInstance = isInstance && "areaOfRoadSurface" in value;
    isInstance = isInstance && "noOfStreetLights" in value;
    isInstance = isInstance && "roadLength" in value;

    return isInstance;
}

export function CommonSpaceBodyFromJSON(json: any): CommonSpaceBody {
    return CommonSpaceBodyFromJSONTyped(json, false);
}

export function CommonSpaceBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonSpaceBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'commonSpaceTypeId': json['commonSpaceTypeId'],
        'gisArea': json['gisArea'],
        'areaOfGreenSpace': json['areaOfGreenSpace'],
        'areaOfRoadSurface': json['areaOfRoadSurface'],
        'noOfStreetLights': json['noOfStreetLights'],
        'roadLength': json['roadLength'],
        'commonSpaceVersionName': !exists(json, 'commonSpaceVersionName') ? undefined : json['commonSpaceVersionName'],
    };
}

export function CommonSpaceBodyToJSON(value?: CommonSpaceBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'commonSpaceTypeId': value.commonSpaceTypeId,
        'gisArea': value.gisArea,
        'areaOfGreenSpace': value.areaOfGreenSpace,
        'areaOfRoadSurface': value.areaOfRoadSurface,
        'noOfStreetLights': value.noOfStreetLights,
        'roadLength': value.roadLength,
        'commonSpaceVersionName': value.commonSpaceVersionName,
    };
}

