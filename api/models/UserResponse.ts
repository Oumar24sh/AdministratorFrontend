/* tslint:disable */
/* eslint-disable */
/**
 * Beau Plan Administrator\'s API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Claim } from './Claim';
import {
    ClaimFromJSON,
    ClaimFromJSONTyped,
    ClaimToJSON,
} from './Claim';

/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    userName?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserResponse
     */
    roles?: Array<string> | null;
    /**
     * 
     * @type {Array<Claim>}
     * @memberof UserResponse
     */
    rolesClaims?: Array<Claim> | null;
    /**
     * 
     * @type {Array<Claim>}
     * @memberof UserResponse
     */
    userClaims?: Array<Claim> | null;
}

/**
 * Check if a given object implements the UserResponse interface.
 */
export function instanceOfUserResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserResponseFromJSON(json: any): UserResponse {
    return UserResponseFromJSONTyped(json, false);
}

export function UserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'roles': !exists(json, 'roles') ? undefined : json['roles'],
        'rolesClaims': !exists(json, 'rolesClaims') ? undefined : (json['rolesClaims'] === null ? null : (json['rolesClaims'] as Array<any>).map(ClaimFromJSON)),
        'userClaims': !exists(json, 'userClaims') ? undefined : (json['userClaims'] === null ? null : (json['userClaims'] as Array<any>).map(ClaimFromJSON)),
    };
}

export function UserResponseToJSON(value?: UserResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'email': value.email,
        'userName': value.userName,
        'roles': value.roles,
        'rolesClaims': value.rolesClaims === undefined ? undefined : (value.rolesClaims === null ? null : (value.rolesClaims as Array<any>).map(ClaimToJSON)),
        'userClaims': value.userClaims === undefined ? undefined : (value.userClaims === null ? null : (value.userClaims as Array<any>).map(ClaimToJSON)),
    };
}

