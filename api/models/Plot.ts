/* tslint:disable */
/* eslint-disable */
/**
 * Beau Plan Administrator\'s API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Aff } from './Aff';
import {
    AffFromJSON,
    AffFromJSONTyped,
    AffToJSON,
} from './Aff';
import type { PlotCalculation } from './PlotCalculation';
import {
    PlotCalculationFromJSON,
    PlotCalculationFromJSONTyped,
    PlotCalculationToJSON,
} from './PlotCalculation';
import type { PlotHistory } from './PlotHistory';
import {
    PlotHistoryFromJSON,
    PlotHistoryFromJSONTyped,
    PlotHistoryToJSON,
} from './PlotHistory';

/**
 * 
 * @export
 * @interface Plot
 */
export interface Plot {
    /**
     * 
     * @type {number}
     * @memberof Plot
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Plot
     */
    ref: string;
    /**
     * 
     * @type {string}
     * @memberof Plot
     */
    displayName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Plot
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Plot
     */
    affId?: number;
    /**
     * 
     * @type {Aff}
     * @memberof Plot
     */
    aff?: Aff;
    /**
     * 
     * @type {Date}
     * @memberof Plot
     */
    createdAt?: Date | null;
    /**
     * 
     * @type {Array<PlotHistory>}
     * @memberof Plot
     */
    plotHistories?: Array<PlotHistory> | null;
    /**
     * 
     * @type {Array<PlotCalculation>}
     * @memberof Plot
     */
    plotCalculations?: Array<PlotCalculation> | null;
}

/**
 * Check if a given object implements the Plot interface.
 */
export function instanceOfPlot(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ref" in value;

    return isInstance;
}

export function PlotFromJSON(json: any): Plot {
    return PlotFromJSONTyped(json, false);
}

export function PlotFromJSONTyped(json: any, ignoreDiscriminator: boolean): Plot {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ref': json['ref'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'affId': !exists(json, 'affId') ? undefined : json['affId'],
        'aff': !exists(json, 'aff') ? undefined : AffFromJSON(json['aff']),
        'createdAt': !exists(json, 'createdAt') ? undefined : (json['createdAt'] === null ? null : new Date(json['createdAt'])),
        'plotHistories': !exists(json, 'plotHistories') ? undefined : (json['plotHistories'] === null ? null : (json['plotHistories'] as Array<any>).map(PlotHistoryFromJSON)),
        'plotCalculations': !exists(json, 'plotCalculations') ? undefined : (json['plotCalculations'] === null ? null : (json['plotCalculations'] as Array<any>).map(PlotCalculationFromJSON)),
    };
}

export function PlotToJSON(value?: Plot | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'ref': value.ref,
        'displayName': value.displayName,
        'description': value.description,
        'affId': value.affId,
        'aff': AffToJSON(value.aff),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt === null ? null : value.createdAt.toISOString()),
        'plotHistories': value.plotHistories === undefined ? undefined : (value.plotHistories === null ? null : (value.plotHistories as Array<any>).map(PlotHistoryToJSON)),
        'plotCalculations': value.plotCalculations === undefined ? undefined : (value.plotCalculations === null ? null : (value.plotCalculations as Array<any>).map(PlotCalculationToJSON)),
    };
}

